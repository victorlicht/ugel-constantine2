generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  divisions   Division[]
  subdepartments Subdepartment[]
  responsible User        @relation("DepartmentAdmin", fields: [responsibleId], references: [id])
  responsibleId Int
  complaints  Complaint[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Subdepartment {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  department  Department  @relation(fields: [departmentId], references: [id])
  departmentId Int
  responsible User        @relation("SubDepartmentAdmin", fields: [responsibleId], references: [id])
  responsibleId Int
  complaints  Complaint[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Division {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  department  Department  @relation(fields: [departmentId], references: [id])
  departmentId Int
  leader      User        @relation("DivisionLeader", fields: [leaderId], references: [id])
  leaderId     Int
  viceLeader   User?       @relation("DivisionViceLeader", fields: [viceLeaderId], references: [id])
  viceLeaderId Int?
  members      User[]      @relation("DivisionMembers")
  complaints   Complaint[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

}

model User {
  id                   Int         @id @default(autoincrement())
  email                String      @unique
  password             String      // Hashed password
  name                 String?
  sex                  Sex
  title                String      // E.g., "Leader", "Branch Leader"
  role                 Role        // Role in the organization
  isActive             Boolean     @default(true) // Determines if user can log in
  responsibleDept        Department[] @relation("DepartmentAdmin")
  divisionsLeds         Division[]  @relation("DivisionLeader")
  divisionsViceLeds     Division[] @relation("DivisionViceLeader")
  divisionMemberships   Division[]  @relation("DivisionMembers")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  responsibleSubDept   Subdepartment[] @relation("SubDepartmentAdmin")
}

model Complaint {
  id              Int         @id @default(autoincrement())
  studentId       String
  firstName       String
  lastName        String
  contactInfo     String
  sex             Sex
  description     String
  status          Status      @default(Pending)
  department      Department  @relation(fields: [departmentId], references: [id])
  departmentId    Int
  division        Division?   @relation(fields: [divisionId], references: [id])
  divisionId      Int?
  subdepartment   Subdepartment? @relation(fields: [subdepartmentId], references: [id])
  subdepartmentId Int?
  createdAt       DateTime    @default(now())
}

enum Sex {
  Male
  Female
}

enum Role {
  SuperAdmin
  Admin
  Moderator
  Member
  Journalist
}

enum Status {
  Pending
  InProgress
  Resolved
  Closed
}